.row-fluid
	.span12
		%h2.page-header
			Standardize Your Spreadsheet
			%small
				= @spreadsheet.filename
		

.row-fluid
	.container-fluid#main

%hr.row-fluid

%script#codes-template{type: "text/template"}
	.row-fluid
		%h4 Which country codes/names should Countrysaurus add to your data?
		%table.table.table-bordered
			- Country.canonical_keys.each_slice(8) do |slice|
				%ul.unstyled.span3
					- slice.each do |key|
						%li
							%span.code.btn.btn-block{onclick: "$(this).toggleClass('btn-info')"}
								= key.to_s
		.row-fluid
			%p.btn.btn-success.continue
				Continue &rarr;

%script#download-template{type: "text/template"}

	.row-fluid
		.span12.container-fluid
			.row-fluid
				%h4.span12	
					Ok, Countrysaurus joined in standardized country names and codes!
			.row-fluid
				.span12
					.alert.alert-warning
						%p
							%strong
								Warning!
						%p
							In order to save space, Countrysaurus going to delete your spreadsheet 
							%em
								5 minutes from now.
						%p
							So, 
							%strong
								download your spreadsheet!
			.row-fluid
				%a.btn.btn-success.download{href: "/spreadsheets/#{@spreadsheet.id}/new_csv"}
					Download! 



%script#suggest-template{type: "text/template"}
	.container-fluid
		.row-fluid
			%p.span12.suggest-text
				Generally speaking, is <%= value %> another name for <%= user_choice %> (<%= user_choice_iso3 %>)?
		.row-fluid
			.span6
				%a.btn.btn-success{onclick: "add_alias(this)"}
					Yes, let's remember it.
					.original_value{style: "display:none;"}<>
						<%= value %>
					.user_choice{style: "display:none;"}<>
						<%= user_choice_iso3 %>
			.span6
				%a.btn.btn-warning{onclick: "$(this).closest('.suggest').slideUp()"}
					No, ignore it.
%script#error-template{type: "text/template"}
	.row-fluid
		.span12
			.alert.alert-error
				%p
					%strong
						Uh oh &mdash;
					I couldn't handle your file,
					%em
						= "#{@spreadsheet.filename}."
					Are you sure it was:
					%ul.unstyled
						%li 
							A valid CSV file 
							%br
							%span.muted
								See the 
								%a{href: "/"}
									home page
								for instructions on createing a CSV.
						%li 
							%strong
								and
						%li
							Less than 10 megabytes

%script#status-template{type: "text/template"}
	.alert.alert-info
		.row-fluid
			%h3 Hard at work!
		.row-fluid
			.span12
				%p 
					<%= status %>
		.row-fluid
			.span12
				.progress
					! <div class='bar' style='width:<%= percent %>%;'></div> 

%script#fields-template{type: "text/template"}
	.row-fluid.step.step1
		.span12.container-fluid
			.row-fluid
				%h4 
					Countrysaurs found these fields in your spreadsheet. 
					%span.text-info
						Which ones have country names in them?
				%ul.unstyled.span4
					<% field_names.forEach(function(fn) { %>
					%li
						%p.field-name.btn.btn-block{onclick: "$(this).toggleClass('btn-info')"}
							<%= fn %>
					<% }) %>
			.row-fluid
				%p.btn.btn-success.continue
					Continue &rarr;
%script#matches-template{type: "text/template"}
	.row-fluid
		.span12.container-fluid
			%h4.row-fluid
				Countrysaurus found these country names and tried to match them. 
				%span.text-info
					Did he match them all correctly?
			%ul#matches.unstyled.row-fluid
				<% possible_names.forEach(function(possibility) { %>
				%li.match
					%strong>
						"
						%span.value<>
							<%= possibility.value %>
						" :
					%span.first-guess{style: "display:none;"}
						<%= possibility.match["iso3"] %>
					%select.countries{ onchange: "is_this_another_name(this)"}
						%option

						<%= window.Countries.as_options(possibility.match["iso3"]) %>
					%p.suggest.alert.alert-info{style: "display:none;"}
					%p.confirm.text-success{style: "display:none;"}
				<% }) %>

			.row-fluid
				%p.btn.btn-success.continue
					Continue &rarr;



:coffeescript
	@Countries = []
	Countries.as_options = (selected) ->
		this.map((c) ->
			iso3 = c["iso3"]
			if iso3 is selected
				is_selected = "selected='selected'"
			else
				is_selected = ""
			"<option value='" + iso3 + "' " + is_selected + ">" + c["name"] + "</option>" 
		).join("")

	@fetch_countries = ->
		$.get("/countries/json", (data) ->
			(Countries.push(d) for d in data)
			# console.log "received", Countries			
			)
	
	@SS = new Marionette.Application()

	$(->
		SS.start()
		# console.log "Started"
		window.ss = new SS.Spreadsheet({"_id" : "#{@spreadsheet._id}"})
		fetch_countries()

	)

	SS.addRegions(
		main_region: "#main"
	)

	SS.Spreadsheet = Backbone.Model.extend(
		idAttribute: "_id"
		urlRoot: "/spreadsheets"
		
		initialize: ->
			this.fetch(
				success: (model) ->
					# console.log "fetched model", model.toJSON() 
					model.start_working()
			)

		start_working: ->
			working = new SS.SpreadsheetStatusView({model: this})
			SS.main_region.show(working)

		choose_fields: ->
			fields = new SS.SpreadsheetFieldsView({model: this})
			SS.main_region.show(fields)

		find_possible_names: ->
			$.get(this.url() + "/possible_names")

		verify_matches: ->
			matches = new SS.SpreadsheetMatchesView({model: this})
			SS.main_region.show(matches)

		choose_codes_to_add: ->
			codes = new SS.SpreadsheetCodesView({model: this})
			SS.main_region.show(codes)

		standardize: ->
			standardize_data = 
				codes_to_add: this.get("codes_to_add")
				field_names: this.get("field_names")
				values_to_iso3: this.get("values_to_iso3")

			$.post(this.url() + "/standardize", standardize_data, (data) -> console.log(data) )
			this.start_working()

		offer_csv: ->
			download = new SS.SpreadsheetDownloadView({model: this})
			SS.main_region.show(download)

		show_invalid_error_message: ->
			error_msg = new SS.SpreadsheetErrorView()
			SS.main_region.show(error_msg)
	)

	SS.SpreadsheetDownloadView = Backbone.Marionette.ItemView.extend(
		template: "#download-template"
		events: 
			"click .download" : "send_delete_request"
		send_delete_request: ->
			this.model.destroy()

	)
	SS.SpreadsheetCodesView = Backbone.Marionette.ItemView.extend(
		template: "#codes-template"
		events: 
			"click .continue" : "start_creating_spreadsheet"

		start_creating_spreadsheet: ->
			codes_to_add = []
			$('.code.btn-info').each(() ->
				codes_to_add.push($(this).text().trim())
			)
			this.model.set("codes_to_add", codes_to_add)
			this.model.standardize()

	)
	
	SS.SpreadsheetMatchesView = Backbone.Marionette.ItemView.extend(
		template: "#matches-template"
		events:
			"click .continue" : "save_matches"

		save_matches: ->
			values_to_iso3 = {}
			$('.match').each(() ->
				$el = $(this)
				value = $el.find('.value').text().trim()
				iso3 = $el.find('.countries :selected').val()
				values_to_iso3[value] = iso3
			)
			# console.log "values_to_iso3:", values_to_iso3
			this.model.set("values_to_iso3", values_to_iso3)
			this.model.choose_codes_to_add()
	)

	SS.SpreadsheetFieldsView = Backbone.Marionette.ItemView.extend(
		template: "#fields-template"
		events: 
			"click .continue" : "send_field_names"

		send_field_names: ->
			field_names = []
			$('.field-name.btn-info').each(() ->
				field_names.push $(this).text().trim()
			)
			# console.log "fields:", field_names
			
			$.get(this.model.url() + "/unique_values", {field_names, field_names})
			
			this.model.save("field_names", field_names,
				success: (model) ->
					model.start_working() 
				)

	)

	SS.SpreadsheetStatusView = Backbone.Marionette.ItemView.extend(
		template: "#status-template"

		initialize: ->
			
			model = this.model
			view = this
			view.interval = setInterval(->
				view.poll()
			, 300)
			# console.log this


		onBeforeClose: ->
			console.log "closing, killing:", this.interval
			clearInterval(this.interval)

		poll: () ->
			view = this
			this.model.fetch(
				success:  (model) ->
					status = model.get("status")
					# console.log status
					if (status is "invalid_file")
						model.show_invalid_error_message()
					else if status is "valid_file"
						model.choose_fields()
					else if status is "found_unique_values"
						model.find_possible_names()
						view.render()
					else if status is "found_possible_matches"
						model.verify_matches()
					else if status is "csv_is_ready"
						model.offer_csv()

					else
						view.render()

			)

			

	)

	SS.SpreadsheetErrorView = Backbone.Marionette.ItemView.extend(
		template: "#error-template"
	)
	
	@is_this_another_name = (el) ->
		$el = $(el)
		target = $el.siblings('.suggest')
		first_guess = $el.siblings('.first-guess').text().trim()
		
		data = {}
		data.value = $el.parent().find(".value").text().trim()
		data.user_choice = $el.find(":selected").text().trim()
		data.user_choice_iso3 = $el.find(":selected").val()
		# console.log "new mapping:", data, "first guess:", first_guess

		if (data.user_choice_iso3 is first_guess) or (data.user_choice_iso3 == "")
			target.slideUp()
		else 
			suggest_html = _.template($('#suggest-template').html(), data)
			target.html(suggest_html)
			target.slideDown()
			# console.log target,suggest_html

	@add_alias = (el) ->
		$el = $(el)
		iso3 = $(el).find('.user_choice').text().trim()
		alias = $(el).find('.original_value').text().trim()
		confirm = $el.closest('.suggest').siblings('.confirm')
		confirm.text("Saving this new name...")

		$.post(
			"/countries/" + iso3 + "/aliases",
			{alias: alias},
			(data) ->
				$el.closest('.suggest').slideUp()
				confirm.text("Ok, saved it! Thanks.").slideDown()
				setTimeout((() -> confirm.slideUp() ), 3000)
			)

